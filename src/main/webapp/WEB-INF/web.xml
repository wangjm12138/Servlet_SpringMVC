<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="https://jakarta.ee/xml/ns/jakartaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd"
         version="6.0">
<!--    servlet练习-->
<!--    <servlet>-->
<!--        <servlet-name>servlet1</servlet-name>-->
<!--        <servlet-class>com.jackie.controller.Servlet1</servlet-class>-->
<!--        <init-param>-->
<!--            <param-name>brand</param-name>-->
<!--            <param-value>huawei</param-value>-->
<!--        </init-param>-->
<!--    </servlet>-->

<!--    <servlet-mapping>-->
<!--        <servlet-name>servlet1</servlet-name>-->
<!--        <url-pattern>/myServlet1</url-pattern>-->
<!--    </servlet-mapping>-->

    <servlet>
        <servlet-name>AsyncServlet</servlet-name>
        <servlet-class>com.jackie.controller.AsyncServlet</servlet-class>
        <async-supported>true</async-supported>
    </servlet>

    <servlet-mapping>
        <servlet-name>AsyncServlet</servlet-name>
        <url-pattern>/async</url-pattern>
    </servlet-mapping>
<!--    <context-param>-->
<!--        <param-name>username</param-name>-->
<!--        <param-value>mashibing</param-value>-->
<!--    </context-param>-->

<!--    <context-param>-->
<!--        <param-name>password</param-name>-->
<!--        <param-value>123456</param-value>-->
<!--    </context-param>-->


<!--    spring mvc练习-->
    <!--向ServletContext中添加spring核心配置文件的位置-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationcontext.xml</param-value>
    </context-param>

    <!--spring核心容器配置
通过监听器,监听JAVAWEB项目中的ServletContext创建的时候,就创建一个spring的容器,并放入ServletContext对象中
-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

<!--    配置前端控制器 -->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
<!--        初始化参数，指定springmvc配置文件的路径-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
<!--        立刻初始化servlet-->
        <load-on-startup>1</load-on-startup>
<!--        springmvc 6以上支持文件上传需要配置这个，如果是springmvc5则是需要再springmvc的xml里面配置commonsMultipartResolver-->
        <multipart-config>
<!--            &lt;!&ndash;设置单个支持最大文件的大小&ndash;&gt;-->
<!--            <max-file-size>102400</max-file-size>-->
<!--            &lt;!&ndash;设置整个表单所有文件上传的最大值&ndash;&gt;-->
<!--            <max-request-size>102400</max-request-size>-->
<!--            &lt;!&ndash;设置最小上传文件大小&ndash;&gt;-->
<!--            <file-size-threshold>0</file-size-threshold>-->
        </multipart-config>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
<!--        匹配所有的资源，除了JSP-->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!--    用来内部post转put,delete请求-->
    <filter>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!--    post请求中文乱码解决用filter，get中文参数请求乱码可以用tomacat的连接器connector设置URIEncoding=utf-8解决-->
    <filter>
        <filter-name>encFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>